// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/netcopula.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvn_arma
arma::vec dmvn_arma(const arma::mat& x, const arma::vec& mean, const arma::mat& sigma, const bool& logd);
RcppExport SEXP _netcopula_dmvn_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvn_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmvn_arma
arma::mat rmvn_arma(const int& n, const arma::vec& mean, const arma::mat& sigma);
RcppExport SEXP _netcopula_rmvn_arma(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvn_arma(n, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dinvwish_arma
double dinvwish_arma(const arma::mat& IW, const int& nu, const arma::mat& S, const bool& logd);
RcppExport SEXP _netcopula_dinvwish_arma(SEXP IWSEXP, SEXP nuSEXP, SEXP SSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type IW(IWSEXP);
    Rcpp::traits::input_parameter< const int& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvwish_arma(IW, nu, S, logd));
    return rcpp_result_gen;
END_RCPP
}
// rinvwish_arma
arma::mat rinvwish_arma(const int& nu, const arma::mat& S);
RcppExport SEXP _netcopula_rinvwish_arma(SEXP nuSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwish_arma(nu, S));
    return rcpp_result_gen;
END_RCPP
}
// dlkj_arma
double dlkj_arma(const arma::mat& R, const double& eta, const bool& logd);
RcppExport SEXP _netcopula_dlkj_arma(SEXP RSEXP, SEXP etaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dlkj_arma(R, eta, logd));
    return rcpp_result_gen;
END_RCPP
}
// rlkj_arma
arma::mat rlkj_arma(const int& K, const double& eta);
RcppExport SEXP _netcopula_rlkj_arma(SEXP KSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(rlkj_arma(K, eta));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnorm_rcpp
Rcpp::NumericVector rtruncnorm_rcpp(const int& n, const double& a, const double& b, const double& mean, const double& sd);
RcppExport SEXP _netcopula_rtruncnorm_rcpp(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm_rcpp(n, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dtruncnorm_rcpp
Rcpp::NumericVector dtruncnorm_rcpp(const Rcpp::NumericVector& x, const double& a, const double& b, const double& mean, const double& sd);
RcppExport SEXP _netcopula_dtruncnorm_rcpp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dtruncnorm_rcpp(x, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dlogchol_arma
double dlogchol_arma(const arma::mat& A, const double& sigma_r, const bool& logd);
RcppExport SEXP _netcopula_dlogchol_arma(SEXP ASEXP, SEXP sigma_rSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_r(sigma_rSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogchol_arma(A, sigma_r, logd));
    return rcpp_result_gen;
END_RCPP
}
// rlogchol_arma
arma::mat rlogchol_arma(const int& M, const double& sigma_r);
RcppExport SEXP _netcopula_rlogchol_arma(SEXP MSEXP, SEXP sigma_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_r(sigma_rSEXP);
    rcpp_result_gen = Rcpp::wrap(rlogchol_arma(M, sigma_r));
    return rcpp_result_gen;
END_RCPP
}
// dmvt_arma
Rcpp::NumericVector dmvt_arma(const arma::mat& x, const arma::vec& mean, const arma::mat& sigma, const int& df, const bool& logd);
RcppExport SEXP _netcopula_dmvt_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP dfSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvt_arma(x, mean, sigma, df, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmvt_arma
arma::mat rmvt_arma(const int& n, const arma::vec& mean, const arma::mat& sigma, const int& df);
RcppExport SEXP _netcopula_rmvt_arma(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvt_arma(n, mean, sigma, df));
    return rcpp_result_gen;
END_RCPP
}
// dinvgamma_rcpp
arma::vec dinvgamma_rcpp(const arma::vec& x, const double& alpha, const double& beta, const bool& logd);
RcppExport SEXP _netcopula_dinvgamma_rcpp(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvgamma_rcpp(x, alpha, beta, logd));
    return rcpp_result_gen;
END_RCPP
}
// rinvgamma_rcpp
arma::vec rinvgamma_rcpp(const int& n, const double& alpha, const double& beta);
RcppExport SEXP _netcopula_rinvgamma_rcpp(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgamma_rcpp(n, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// gausscopdens
double gausscopdens(const Rcpp::NumericVector& u, const arma::mat& Gamma, const bool& is_u, const bool& logd);
RcppExport SEXP _netcopula_gausscopdens(SEXP uSEXP, SEXP GammaSEXP, SEXP is_uSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_u(is_uSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(gausscopdens(u, Gamma, is_u, logd));
    return rcpp_result_gen;
END_RCPP
}
// field_to_matrix
arma::mat field_to_matrix(arma::field<arma::vec> x);
RcppExport SEXP _netcopula_field_to_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(field_to_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// nc_mcmc_mh
Rcpp::List nc_mcmc_mh(const Rcpp::RObject& data, const Rcpp::List& init, const int& totiter, const Rcpp::List& prior, const Rcpp::List& prop, const Rcpp::List& tuning, const Rcpp::List& adapt, const bool& verbose);
RcppExport SEXP _netcopula_nc_mcmc_mh(SEXP dataSEXP, SEXP initSEXP, SEXP totiterSEXP, SEXP priorSEXP, SEXP propSEXP, SEXP tuningSEXP, SEXP adaptSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const int& >::type totiter(totiterSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prop(propSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(nc_mcmc_mh(data, init, totiter, prior, prop, tuning, adapt, verbose));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_block
arma::mat Sigma_block(const arma::mat& Sigma_M, const int& n);
RcppExport SEXP _netcopula_Sigma_block(SEXP Sigma_MSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_M(Sigma_MSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_block(Sigma_M, n));
    return rcpp_result_gen;
END_RCPP
}
// logit_rcpp
Rcpp::NumericVector logit_rcpp(Rcpp::NumericVector p);
RcppExport SEXP _netcopula_logit_rcpp(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logit_rcpp(p));
    return rcpp_result_gen;
END_RCPP
}
// expit_rcpp
Rcpp::NumericVector expit_rcpp(Rcpp::NumericVector x);
RcppExport SEXP _netcopula_expit_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expit_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// param_long
Rcpp::NumericMatrix param_long(const Rcpp::NumericMatrix& prm_wide, const Rcpp::IntegerVector& narms, const bool& rowindex);
RcppExport SEXP _netcopula_param_long(SEXP prm_wideSEXP, SEXP narmsSEXP, SEXP rowindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type prm_wide(prm_wideSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type rowindex(rowindexSEXP);
    rcpp_result_gen = Rcpp::wrap(param_long(prm_wide, narms, rowindex));
    return rcpp_result_gen;
END_RCPP
}
// param_wide
Rcpp::NumericMatrix param_wide(const Rcpp::NumericMatrix& prm_long, const Rcpp::IntegerVector& narms, const Rcpp::IntegerVector& trt, const Rcpp::IntegerVector& baseline);
RcppExport SEXP _netcopula_param_wide(SEXP prm_longSEXP, SEXP narmsSEXP, SEXP trtSEXP, SEXP baselineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type prm_long(prm_longSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type narms(narmsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type baseline(baselineSEXP);
    rcpp_result_gen = Rcpp::wrap(param_wide(prm_long, narms, trt, baseline));
    return rcpp_result_gen;
END_RCPP
}
// spearman_mcmc
arma::mat spearman_mcmc(const arma::cube& Gamma_chain, const double& n, const double& M);
RcppExport SEXP _netcopula_spearman_mcmc(SEXP Gamma_chainSEXP, SEXP nSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Gamma_chain(Gamma_chainSEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_mcmc(Gamma_chain, n, M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_netcopula_dmvn_arma", (DL_FUNC) &_netcopula_dmvn_arma, 4},
    {"_netcopula_rmvn_arma", (DL_FUNC) &_netcopula_rmvn_arma, 3},
    {"_netcopula_dinvwish_arma", (DL_FUNC) &_netcopula_dinvwish_arma, 4},
    {"_netcopula_rinvwish_arma", (DL_FUNC) &_netcopula_rinvwish_arma, 2},
    {"_netcopula_dlkj_arma", (DL_FUNC) &_netcopula_dlkj_arma, 3},
    {"_netcopula_rlkj_arma", (DL_FUNC) &_netcopula_rlkj_arma, 2},
    {"_netcopula_rtruncnorm_rcpp", (DL_FUNC) &_netcopula_rtruncnorm_rcpp, 5},
    {"_netcopula_dtruncnorm_rcpp", (DL_FUNC) &_netcopula_dtruncnorm_rcpp, 5},
    {"_netcopula_dlogchol_arma", (DL_FUNC) &_netcopula_dlogchol_arma, 3},
    {"_netcopula_rlogchol_arma", (DL_FUNC) &_netcopula_rlogchol_arma, 2},
    {"_netcopula_dmvt_arma", (DL_FUNC) &_netcopula_dmvt_arma, 5},
    {"_netcopula_rmvt_arma", (DL_FUNC) &_netcopula_rmvt_arma, 4},
    {"_netcopula_dinvgamma_rcpp", (DL_FUNC) &_netcopula_dinvgamma_rcpp, 4},
    {"_netcopula_rinvgamma_rcpp", (DL_FUNC) &_netcopula_rinvgamma_rcpp, 3},
    {"_netcopula_gausscopdens", (DL_FUNC) &_netcopula_gausscopdens, 4},
    {"_netcopula_field_to_matrix", (DL_FUNC) &_netcopula_field_to_matrix, 1},
    {"_netcopula_nc_mcmc_mh", (DL_FUNC) &_netcopula_nc_mcmc_mh, 8},
    {"_netcopula_Sigma_block", (DL_FUNC) &_netcopula_Sigma_block, 2},
    {"_netcopula_logit_rcpp", (DL_FUNC) &_netcopula_logit_rcpp, 1},
    {"_netcopula_expit_rcpp", (DL_FUNC) &_netcopula_expit_rcpp, 1},
    {"_netcopula_param_long", (DL_FUNC) &_netcopula_param_long, 3},
    {"_netcopula_param_wide", (DL_FUNC) &_netcopula_param_wide, 4},
    {"_netcopula_spearman_mcmc", (DL_FUNC) &_netcopula_spearman_mcmc, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_netcopula(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
